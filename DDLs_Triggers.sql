USE master;
GO

CREATE DATABASE Yourube_analytic ON
(NAME = yt_dat,
    FILENAME = 'C:\Program Files\Microsoft SQL Server\MSSQL16.MSSQLSERVER\MSSQL\DATA\ytdat.mdf',
    SIZE = 10,
    MAXSIZE = 50,
    FILEGROWTH = 5)
LOG ON
(NAME = yt_log,
    FILENAME = 'C:\Program Files\Microsoft SQL Server\MSSQL16.MSSQLSERVER\MSSQL\DATA\ytlog.ldf',
    SIZE = 5 MB,
    MAXSIZE = 25 MB,
    FILEGROWTH = 5 MB);
GO

DROP TABLE [VIDEO];
GO
DROP TABLE [CHANNEL];
GO
DROP TABLE [VIDEO_DETAILS];
GO
DROP TABLE [TITLE];

GO
CREATE TABLE YOUTUBE_ANALYTIC.DBO.[CHANNEL] (
  [ID] INTEGER IDENTITY PRIMARY KEY,
  [YT_CHANNEL_ID] VARCHAR(24) NOT NULL,
  [CHANNEL_TITLE] VARCHAR(50) NOT NULL,
  [SUBSCRIBERS_COUNT] INTEGER NOT NULL,
  [VIDEOS_COUNT] INTEGER NOT NULL,
  [IS_CURRENT] BIT DEFAULT 1 NOT NULL,
  [IS_DELETED] BIT DEFAULT 0 NOT NULL,
  [CREATED_AT] DATETIME DEFAULT CURRENT_TIMESTAMP,
  [EXPIRED_AT] DATETIME,
)
GO

CREATE TABLE YOUTUBE_ANALYTIC.DBO.[VIDEO_DETAILS] (
  [ID] INTEGER IDENTITY PRIMARY KEY,
  [YT_VIDEO_ID] VARCHAR(15) NOT NULL,
  [VIDEO_TITLE] VARCHAR(150) NOT NULL,
  [DESCRIPTION] VARCHAR(5000) NOT NULL,
  [DURATION] INTEGER NOT NULL,
  [PUBLISHED_AT] VARCHAR(50) NOT NULL,
  [IS_CURRENT] BIT DEFAULT 1 NOT NULL,
  [IS_DELETED] BIT DEFAULT 0 NOT NULL,
  [CREATED_AT] DATETIME DEFAULT CURRENT_TIMESTAMP,
  [EXPIRED_AT] DATETIME,
)
GO

CREATE TABLE YOUTUBE_ANALYTIC.DBO.[TITLE] (
  [ID] INTEGER IDENTITY PRIMARY KEY NOT NULL,
  [BY_TITLE] VARCHAR(50) NOT NULL,
  [IS_CURRENT] BIT DEFAULT 1 NOT NULL,
  [IS_DELETED] BIT DEFAULT 0 NOT NULL,
  [CREATED_AT] DATETIME DEFAULT CURRENT_TIMESTAMP,
  [EXPIRED_AT] DATETIME,
)
GO
CREATE TABLE YOUTUBE_ANALYTIC.DBO.[VIDEO] (
  [ID] INTEGER IDENTITY PRIMARY KEY,
  [CHANNEL_ID] VARCHAR(24) NOT NULL,
  [VIDEO_ID] VARCHAR(15) NOT NULL,
  [VIEW_COUNT] INTEGER NOT NULL,
  [LIKE_COUNT] INTEGER NOT NULL,
  [COMMENT_COUNT] INTEGER NOT NULL,
  [TITLE_ID] INTEGER NOT NULL,
  [IS_CURRENT] BIT DEFAULT 1 NOT NULL,
  [IS_DELETED] BIT DEFAULT 0 NOT NULL,
  [CREATED_AT] DATETIME DEFAULT CURRENT_TIMESTAMP,
  [EXPIRED_AT] DATETIME,
  -- implicit relationship between tables
  -- FOREIGN KEY ([CHANNEL_ID]) REFERENCES YOUTUBE_ANALYTIC.DBO.[CHANNEL] ([YT_CHANNEL_ID]),
  -- FOREIGN KEY ([VIDEO_ID]) REFERENCES YOUTUBE_ANALYTIC.DBO.[VIDEO_DETAILS] ([YT_VIDEO_ID]),
  FOREIGN KEY ([TITLE_ID]) REFERENCES YOUTUBE_ANALYTIC.DBO.[TITLE] ([ID])
)

GO

-- Triggers for title table
CREATE TRIGGER DBO.TRG_TITLE_DELETE
ON TITLE
INSTEAD OF DELETE
AS
BEGIN
	-- SET IS_DELETED IN TITLE TABLE
	UPDATE YOUTUBE_ANALYTIC.DBO.TITLE
	SET
		IS_DELETED = 1,
		EXPIRED_AT = CURRENT_TIMESTAMP
	WHERE ID = (SELECT ID FROM DELETED);
	-- Set is_deleted=1 to all videos in db with specified title_id
	UPDATE YOUTUBE_ANALYTIC.DBO.VIDEO
	SET
		IS_DELETED = 1,
		EXPIRED_AT = CURRENT_TIMESTAMP
	WHERE
		TITLE_ID = (SELECT ID FROM DELETED);

	UPDATE YOUTUBE_ANALYTIC.DBO.VIDEO_DETAILS
	SET
		VIDEO_DETAILS.IS_DELETED = 1,
		VIDEO_DETAILS.EXPIRED_AT = CURRENT_TIMESTAMP
	FROM
		YOUTUBE_ANALYTIC.DBO.VIDEO_DETAILS JOIN YOUTUBE_ANALYTIC.DBO.VIDEO ON VIDEO_DETAILS.ID = VIDEO_ID
	WHERE
		TITLE_ID = (SELECT ID FROM DELETED);
END;

GO

CREATE TRIGGER DBO.TRG_TITLE_UPDATE
ON TITLE
INSTEAD OF UPDATE
AS
	RAISERROR('You cannot update records in this table!', 16, 1);

GO

-- Triggers for video table
CREATE TRIGGER DBO.TRG_VIDEO_DELETE
ON VIDEO
INSTEAD OF DELETE
AS
BEGIN
	UPDATE YOUTUBE_ANALYTIC.DBO.VIDEO
	SET
		IS_DELETED = 1,
		EXPIRED_AT = CURRENT_TIMESTAMP
	WHERE
		ID = (SELECT ID FROM DELETED);
	-- SET IS_DELETED=1 TO ALL VIDEOS IN DB WITH SPECIFIED VIDEO_ID
	UPDATE YOUTUBE_ANALYTIC.DBO.VIDEO_DETAILS
	SET
		VIDEO_DETAILS.IS_DELETED = 1,
		VIDEO_DETAILS.EXPIRED_AT = CURRENT_TIMESTAMP
	FROM
		YOUTUBE_ANALYTIC.DBO.VIDEO_DETAILS JOIN YOUTUBE_ANALYTIC.DBO.VIDEO ON VIDEO_DETAILS.ID = VIDEO_ID
	WHERE
		VIDEO.ID = (SELECT ID FROM DELETED);
END;

GO

CREATE TRIGGER DBO.TRG_VIDEO_INSERT
ON YOUTUBE_ANALYTIC.DBO.VIDEO
INSTEAD OF INSERT
AS
DECLARE @CHANNEL_ID VARCHAR(20)
DECLARE @VIDEO_ID VARCHAR(15)
DECLARE @VIEW_COUNT INTEGER
DECLARE @LIKE_COUNT INTEGER
DECLARE @COMMENT_COUNT INTEGER
DECLARE @TITLE_ID INTEGER
	DECLARE INSERT_CUR CURSOR FOR
		SELECT [CHANNEL_ID], [VIDEO_ID], [VIEW_COUNT], [LIKE_COUNT], [COMMENT_COUNT], [TITLE_ID]
		FROM INSERTED
	OPEN INSERT_CUR
	FETCH NEXT FROM INSERT_CUR INTO @CHANNEL_ID, @VIDEO_ID, @VIEW_COUNT, @LIKE_COUNT, @COMMENT_COUNT, @TITLE_ID
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF NOT EXISTS (
			SELECT * FROM YOUTUBE_ANALYTIC.DBO.VIDEO T
			INNER JOIN INSERTED I
			ON T.VIDEO_ID=@VIDEO_ID
			WHERE T.[VIEW_COUNT] = @VIEW_COUNT AND T.[LIKE_COUNT] = @LIKE_COUNT AND T.[TITLE_ID] = @TITLE_ID)
			BEGIN
				UPDATE YOUTUBE_ANALYTIC.DBO.VIDEO
				SET
					IS_CURRENT = 0,
					EXPIRED_AT = CURRENT_TIMESTAMP
				WHERE IS_CURRENT = 1 AND VIDEO_ID = @VIDEO_ID;

				INSERT INTO YOUTUBE_ANALYTIC.DBO.VIDEO ([CHANNEL_ID], [VIDEO_ID], [VIEW_COUNT], [LIKE_COUNT], [COMMENT_COUNT], [TITLE_ID])
				VALUES (@CHANNEL_ID, @VIDEO_ID, @VIEW_COUNT, @LIKE_COUNT, @COMMENT_COUNT, @TITLE_ID);
			END;
		FETCH NEXT FROM INSERT_CUR INTO @CHANNEL_ID, @VIDEO_ID, @VIEW_COUNT, @LIKE_COUNT, @COMMENT_COUNT, @TITLE_ID
	END
   CLOSE INSERT_CUR
   DEALLOCATE INSERT_CUR;

GO

CREATE TRIGGER dbo.trg_video_update
ON video
INSTEAD OF UPDATE
AS
	RAISERROR('You cannot update records in this table!', 16, 1);

GO

-- Triggers for channel table
CREATE TRIGGER DBO.TRG_CHANNEL_DELETE
ON CHANNEL
INSTEAD OF DELETE
AS
BEGIN
	-- SET IS_DELETED IN CHANNEL TABLE
	UPDATE YOUTUBE_ANALYTIC.DBO.CHANNEL
	SET
		IS_DELETED = 1,
		EXPIRED_AT = CURRENT_TIMESTAMP
	WHERE ID = (SELECT ID FROM DELETED);
	-- SET IS_DELETED=1 TO ALL VIDEOS IN DB WITH SPECIFIED CHANNEL_ID
	UPDATE YOUTUBE_ANALYTIC.DBO.VIDEO
	SET
		IS_DELETED = 1,
		EXPIRED_AT = CURRENT_TIMESTAMP
	WHERE
		CHANNEL_ID = (SELECT ID FROM DELETED);

	UPDATE YOUTUBE_ANALYTIC.DBO.VIDEO_DETAILS
	SET
		VIDEO_DETAILS.IS_DELETED = 1,
		VIDEO_DETAILS.EXPIRED_AT = CURRENT_TIMESTAMP
	FROM
		YOUTUBE_ANALYTIC.DBO.VIDEO_DETAILS JOIN YOUTUBE_ANALYTIC.DBO.VIDEO ON VIDEO_DETAILS.ID = VIDEO_ID
	WHERE
		CHANNEL_ID = (SELECT ID FROM DELETED);
END;

GO

CREATE TRIGGER DBO.TRG_CHANNEL_INSERT
ON YOUTUBE_ANALYTIC.DBO.CHANNEL
INSTEAD OF INSERT
AS
DECLARE @CHANNEL_TITLE VARCHAR(20)
DECLARE @YT_CHANNEL_ID VARCHAR(24)
DECLARE @SUBSCRIBERS_COUNT INTEGER
DECLARE @VIDEOS_COUNT INTEGER
DECLARE @OLD_CHANNEL_ID VARCHAR(24)
	DECLARE INSERT_CUR CURSOR FOR
		SELECT [CHANNEL_TITLE], [YT_CHANNEL_ID], [SUBSCRIBERS_COUNT], [VIDEOS_COUNT]
		FROM INSERTED
	OPEN INSERT_CUR
	FETCH NEXT FROM INSERT_CUR INTO @CHANNEL_TITLE, @YT_CHANNEL_ID, @SUBSCRIBERS_COUNT, @VIDEOS_COUNT
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF NOT EXISTS (
			SELECT * FROM YOUTUBE_ANALYTIC.DBO.CHANNEL T
			INNER JOIN INSERTED I
			ON T.YT_CHANNEL_ID=@YT_CHANNEL_ID
			WHERE T.[CHANNEL_TITLE] = @CHANNEL_TITLE AND T.[SUBSCRIBERS_COUNT] = @SUBSCRIBERS_COUNT AND T.[VIDEOS_COUNT] = @VIDEOS_COUNT)
			BEGIN
				SELECT TOP 1 @OLD_CHANNEL_ID = ID
				FROM CHANNEL
				WHERE CHANNEL.YT_CHANNEL_ID = @YT_CHANNEL_ID

				UPDATE YOUTUBE_ANALYTIC.DBO.CHANNEL
				SET
					IS_CURRENT = 0,
					EXPIRED_AT = CURRENT_TIMESTAMP
				WHERE IS_CURRENT = 1 AND YT_CHANNEL_ID = @YT_CHANNEL_ID;

				INSERT INTO YOUTUBE_ANALYTIC.DBO.CHANNEL ([CHANNEL_TITLE], [YT_CHANNEL_ID], [SUBSCRIBERS_COUNT], [VIDEOS_COUNT])
				VALUES (@CHANNEL_TITLE, @YT_CHANNEL_ID, @SUBSCRIBERS_COUNT, @VIDEOS_COUNT);
			END;
		FETCH NEXT FROM INSERT_CUR INTO @CHANNEL_TITLE, @YT_CHANNEL_ID, @SUBSCRIBERS_COUNT, @VIDEOS_COUNT
	END
   CLOSE INSERT_CUR
   DEALLOCATE INSERT_CUR;

GO

CREATE TRIGGER DBO.TRG_CHANNEL_UPDATE
ON CHANNEL
INSTEAD OF UPDATE
AS
	RAISERROR('You cannot update records in this table!', 16, 1);

GO

-- Triggers for video_details table
CREATE TRIGGER DBO.TRG_VIDEO_DETAILS_DELETE
ON VIDEO_DETAILS
INSTEAD OF DELETE
AS
BEGIN
	-- SET IS_DELETED IN CHANNEL TABLE
	UPDATE YOUTUBE_ANALYTIC.DBO.VIDEO_DETAILS
	SET
		IS_DELETED = 1,
		EXPIRED_AT = CURRENT_TIMESTAMP
	WHERE ID = (SELECT ID FROM DELETED);
	-- SET IS_DELETED=1 TO ALL VIDEOS IN DB WITH SPECIFIED CHANNEL_ID
	UPDATE YOUTUBE_ANALYTIC.DBO.VIDEO
	SET
		IS_DELETED = 1,
		EXPIRED_AT = CURRENT_TIMESTAMP
	WHERE
		VIDEO_ID = (SELECT ID FROM DELETED);
END;

GO

CREATE TRIGGER DBO.TRG_VIDEO_DETAILS_INSERT
ON YOUTUBE_ANALYTIC.DBO.VIDEO_DETAILS
INSTEAD OF INSERT
AS
DECLARE @YT_VIDEO_ID VARCHAR(15)
DECLARE @VIDEO_TITLE VARCHAR(150)
DECLARE @DESCRIPTION VARCHAR(5000)
DECLARE @DURATION INTEGER
DECLARE @PUBLISHED_AT DATETIME
	DECLARE INSERT_CUR CURSOR FOR
		SELECT [YT_VIDEO_ID], [VIDEO_TITLE], [DESCRIPTION], [DURATION], [PUBLISHED_AT]
		FROM INSERTED
	OPEN INSERT_CUR
	FETCH NEXT FROM INSERT_CUR INTO @YT_VIDEO_ID, @VIDEO_TITLE, @DESCRIPTION, @DURATION, @PUBLISHED_AT
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF NOT EXISTS (
			SELECT * FROM YOUTUBE_ANALYTIC.DBO.VIDEO_DETAILS T
			LEFT JOIN INSERTED I
			ON T.[YT_VIDEO_ID]=@YT_VIDEO_ID)

			INSERT INTO YOUTUBE_ANALYTIC.DBO.VIDEO_DETAILS ([YT_VIDEO_ID], [VIDEO_TITLE], [DESCRIPTION], [DURATION], [PUBLISHED_AT])
			VALUES (@YT_VIDEO_ID, @VIDEO_TITLE, @DESCRIPTION, @DURATION, @PUBLISHED_AT);

		FETCH NEXT FROM INSERT_CUR INTO @YT_VIDEO_ID, @VIDEO_TITLE, @DESCRIPTION, @DURATION, @PUBLISHED_AT
	END
   CLOSE INSERT_CUR
   DEALLOCATE INSERT_CUR;

GO
-- Initial title data
insert into title (by_title) values('Power BI'),('Power Query')

